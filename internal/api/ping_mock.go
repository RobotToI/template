// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"context"
	"sync"
)

// Ensure, that PingServiceMock does implement PingService.
// If this is not the case, regenerate this file with moq.
var _ PingService = &PingServiceMock{}

// PingServiceMock is a mock implementation of PingService.
//
//	func TestSomethingThatUsesPingService(t *testing.T) {
//
//		// make and configure a mocked PingService
//		mockedPingService := &PingServiceMock{
//			PingFunc: func(ctx context.Context) error {
//				panic("mock out the Ping method")
//			},
//		}
//
//		// use mockedPingService in code that requires PingService
//		// and then make assertions.
//
//	}
type PingServiceMock struct {
	// PingFunc mocks the Ping method.
	PingFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockPing sync.RWMutex
}

// Ping calls PingFunc.
func (mock *PingServiceMock) Ping(ctx context.Context) error {
	if mock.PingFunc == nil {
		panic("PingServiceMock.PingFunc: method is nil but PingService.Ping was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(ctx)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//
//	len(mockedPingService.PingCalls())
func (mock *PingServiceMock) PingCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}
